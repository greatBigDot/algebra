||| Algebra.Magma: A representation of magmas.
|||
||| A magma is more-or-less the simplest non-trivial example of a algebraic
||| structure. It is simply a set together with a lawless binary operation over
||| it. More formally, it is *any* pair
||| \\(\mathscr{M} = (M:\mathscr{V}, \* : M^2 \to M)\\). It doesn't matter what
||| the function \\(\*\\) is. It can have any properties whatsoever; the only
||| reuirement is that it be a function of the specified type. That is, it must
||| be a total co-injective relation with domain \\(M^2\\) and codomain \\(M\\),
||| where by \"co-injective\" I mean that for every input, there is no more than
||| one output. Together with totality, which states that every input has at
||| least one output, this means that a function is a relation where every input
||| has exactly one output.
|||
||| Magmas aren't especially interesting in and of themselves. Because there are
||| no magma axioms, just a type, there isn't much that can be said about magmas
||| in general. However, they give a useful way to talk about other algebraic
||| structures. A group, for example, is a magma satisfying certain laws. In
||| other words, talking in terms of magmas and related lawless algebraic
||| structures just gives us a more convenient way to talk about the signature
||| of the more interesting ones. (Of course, all of this leads naturally to
||| groups, semigroups, monoids, etc. being extensions of the `Magma`
||| interface.)
|||
||| That's not to say there's nothing interesting about magmas. There are
||| interesting combinatorial questions arising from freely generated magmas.
||| That is, consider a magma generated by three elements, \\(a, b, c\\). By
||| \"freely generated\", we mean that there are no equalities except those
||| directly entailed by the axioms; since there aren't any axioms, there aren't
||| any (non-reflexive) equalities! E.g., in a freely generated magma, we know
||| that \\((x\*y)\*z \neq x\*(y\*z)\\) for every \\(x, y, z\\). If they were
||| equal, it would still be a magma, but not a freely generated one. Now, for
||| the free magma with 3 generating elements, how many elements are there with
||| exactly \\(k\\) applications of the operation \\(\*\\)? Or more generally,
||| what if there are \\(n\\) generating elements? If you like combinatorics,
||| you might enjoy working these and related questions out\-\--and, as usual,
|||there's a connection to the Catalan numbers.
module Algebra.Magma

%default total

infix 7 |*|

||| The interface representing magmas. Because magmas have no restrictions other
||| than their signature, the interface has no functions; all the information is
||| carried by the type.
export
interface Magma (M : Type) (op : M -> M -> M) where

||| For some reason, Idris doesn't allow me to refer to the names of implicit
||| arguments, including interface constraints, in the function body. Thus, this
||| function is necessary to define the real one, `Set`, where the magma in
||| question is implicit (in the form of a constraint).
_Set : Magma m op -> Type
_Set _ = m

||| A function for extracting the underlying set of a magma. Because of the
||| organizational choice used in the module (that signature is carried by type
||| and axioms by interface methods), this is necessary. From a
||| catgeory-theoretic standpoint, this is simply the forgetful functor
||| \\(\textrm{Magma} \to \textrm{Set}\\).
export
Set : Magma m op => Type
Set @{magma} = _Set magma

||| For some reason, Idris is giving me trouble when attempting to use operators
||| as names of arguments. Plus, I can't refer to the names of implicit
||| arguments in the function body (again for reasons that are unclear to me).
||| This gets around both issues, allowing the definition of `(|*|)`.
_op : Magma m op -> (m -> m -> m)
_op _ = op

export
(|*|) : Magma m op => m -> m -> m
(|*|) @{magma} = _op magma
